package templ

import "twitterclone/db"
import "fmt"

templ NewPost(user db.User, empty bool) {
	<div class="flex gap-2 m-4 w-full">
		<div class="avatar">
			<div class="w-12 h-12 rounded-md">
				<img src={ "https://api.dicebear.com/8.x/bottts-neutral/svg?backgroundType=solid&translateY=5&scale=80&seed=" + user.Username }/>
			</div>
		</div>
		<textarea
			name="content"
			id="content"
			class="resize-none grow textarea textarea-bordered"
			placeholder="What's happening?"
			hx-post="/post"
			hx-trigger="keyup[!ctrlKey&&!shiftKey&&key=='Enter'&&!isEmpty()]"
			if !empty {
				hx-swap="afterend scroll:top"
				hx-target="#insertAfter"
			} else {
				hx-swap="outerHTML"
				hx-target="#postscontainer"
				hx-vals='{"firstPost": "true"}'
			}
		></textarea>
	</div>
}

templ Post(post db.ListPostsAndUsersRow, isLink bool) {
	<a
		if isLink {
			href={ templ.URL("/posts/" + fmt.Sprint(post.ID)) }
		}
		class="flex flex-row gap-2 p-4 rounded transition hover:bg-white"
	>
		<div class="avatar">
			<div class="w-12 h-12 rounded-md">
				<img src={ "https://api.dicebear.com/8.x/bottts-neutral/svg?backgroundType=solid&translateY=5&scale=80&seed=" + post.Username }/>
			</div>
		</div>
		<div class="flex flex-col gap-1">
			<div class="flex flex-row gap-2 items-center">
				<span class="text-lg font-bold leading-none">{ post.Name.String }</span>
				<span class="leading-none text-neutral-600">{ "@" + post.Username }</span>
			</div>
			<div class="text-left">
				{ post.Content }
			</div>
			@StatRow()
		</div>
	</a>
}

templ StatRow() {
	<div class="flex gap-4 items-center text-sm">
		<button class="flex gap-1 items-center p-1 rounded transition hover:bg-pink-500 hover:text-white">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-5">
				<path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z"></path>
			</svg>
			196
		</button>
		<button class="flex gap-1 items-center p-1 rounded hover:bg-primary hover:text-white">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-5">
				<path stroke-linecap="round" stroke-linejoin="round" d="M12 20.25c4.97 0 9-3.694 9-8.25s-4.03-8.25-9-8.25S3 7.444 3 12c0 2.104.859 4.023 2.273 5.48.432.447.74 1.04.586 1.641a4.483 4.483 0 0 1-.923 1.785A5.969 5.969 0 0 0 6 21c1.282 0 2.47-.402 3.445-1.087.81.22 1.668.337 2.555.337Z"></path>
			</svg>
			24
		</button>
	</div>
}

templ SearchPost(post db.SearchPostsRow) {
	<div class="flex flex-row gap-2">
		<div class="avatar">
			<div class="w-12 rounded-md">
				<img src={ "https://api.dicebear.com/8.x/bottts-neutral/svg?backgroundType=solid&translateY=5&scale=80&seed=" + post.Username }/>
			</div>
		</div>
		<div class="flex flex-col gap-1">
			<div class="flex flex-row gap-2 items-center">
				<span class="text-lg font-bold leading-none">{ post.Name.String }</span>
				<span class="leading-none text-neutral-600">{ "@" + post.Username }</span>
			</div>
			<div>
				{ post.Content }
			</div>
		</div>
	</div>
}

templ RawPostList(posts []db.ListPostsAndUsersRow) {
	for i := range posts {
		if i == len(posts)-1 {
			<div hx-get={ "/posts/?last=" + fmt.Sprint(posts[i].ID) } hx-trigger="intersect once" hx-swap="afterend">
				@Post(posts[i], true)
			</div>
		} else {
			@Post(posts[i], true)
		}
	}
}

templ PostPage(post db.GetPostAndUserRow, user ...db.User) {
	@Page() {
		<div class="grid overflow-hidden grid-cols-4 h-full">
			<div class="col-span-1">
				@SidePanel(user...)
			</div>
			<div class="col-span-2 p-8">
				@Post(CopyToPost(post), false)
			</div>
			<div class="col-span-1 p-8">
				<label id="search" class="flex gap-2 items-center input input-bordered">
					<input name="q" type="text" class="grow" placeholder="Search" hx-get="/entersearch" hx-trigger="keyup[key=='Enter']"/>
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4 opacity-70"><path fill-rule="evenodd" d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z" clip-rule="evenodd"></path></svg>
				</label>
			</div>
		</div>
	}
}

func CopyToPost(a db.GetPostAndUserRow) db.ListPostsAndUsersRow {
	return db.ListPostsAndUsersRow{ID: a.ID, UserID: a.UserID, Content: a.Content, CreatedAt: a.CreatedAt, Name: a.Name, Username: a.Username}
}
